# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Lire la version actuelle à partir du fichier
      $versionFilePath = "$(Build.SourcesDirectory)/version.txt"
      $version = Get-Content $versionFilePath
      
      # Diviser la version en parties : majeure, mineure, patch
      $versionParts = $version -split '\.'
      $major = [int]$versionParts[0]
      $minor = [int]$versionParts[1]
      $patch = [int]$versionParts[2]
      
      # Décider de la partie à incrémenter (ici le patch)
      $patch++
      
      # Construire la nouvelle version
      $newVersion = "$major.$minor.$patch"
      echo "Nouvelle version : $newVersion"
      
      # Mettre à jour le fichier avec la nouvelle version
      Set-Content -Path $versionFilePath -Value $newVersion
      
      # Enregistrer la nouvelle version dans la variable de build
      echo "##vso[task.setvariable variable=version]$newVersion"
  displayName: 'Incrémenter le patch dans version.txt'

- script: |
    git config --global user.name "BuildAgent"
    git config --global user.email "buildagent@mycompany.com"
    git add version.txt
    git commit -m "Incrémentation de la version à $(version)"
    git push origin HEAD:main
  displayName: 'Valider et pousser le fichier de version'

- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    versioningScheme: 'byBuild'
    version: $(version)