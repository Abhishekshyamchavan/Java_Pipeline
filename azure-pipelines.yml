# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

name: $(TeamProject)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)_$(Rev:.r)
variables:
  - group: external-variables
  - name: buildId
    value: '$(Build.BuildId)'
  - name: System.Debug
    value: true

stages :
- stage: Build
  displayName: Build stage

  jobs:  
    - job:
      displayName: Job Test
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: Maven@3
        displayName: UnitTest
        condition: and(not(contains(variables['Build.SourceVersionMessage'], '@noci')),not(contains(variables['Build.SourceVersionMessage'], '@notests')))
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          goals: 'test -P UnitTest'
      - task: Maven@3
        displayName: DBTest
        condition: or(eq(variables['runDbTest'], 'true'), and(not(contains(variables['Build.SourceVersionMessage'], '@noci')), contains(variables['Build.SourceVersionMessage'], '@dbtests')))
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          goals: 'test -P DBTest'
      - task: PublishTestResults@2
        displayName: Merge Test Results
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/TEST-*.xml' 
          mergeTestResults: true
      - task: Maven@3
        displayName: Package
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          goals: 'package -DskipTests=true'
      - task: CopyFiles@2
        inputs:
          contents: 'target/**.war'
          targetFolder: $(Build.ArtifactStagingDirectory)
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)
          artifactName: MonWar

    - job:
      displayName: Job Test 2
      pool:
        vmImage: 'ubuntu-16.04'
      steps:
      - bash: echo "Hello world " + $(Build.BuildId)

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'Test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'MonWar'
              downloadPath: '$(System.ArtifactsDirectory)/MonWar'